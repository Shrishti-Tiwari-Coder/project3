import random
import string
import tkinter as tk
from tkinter import messagebox

def generate_password(length, complexity):
    characters = ""
    
    if complexity == 1:
        characters = string.ascii_lowercase
    elif complexity == 2:
        characters = string.ascii_lowercase + string.ascii_uppercase
    elif complexity == 3:
        characters = string.ascii_lowercase + string.ascii_uppercase + string.digits
    elif complexity == 4:
        characters = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation
    else:
        messagebox.showerror("Error", "Invalid complexity level.")
        return None
    
    password = ''.join(random.choice(characters) for _ in range(length))
    return password

def on_generate():
    try:
        length = int(length_entry.get())
        complexity = complexity_var.get()
        password = generate_password(length, complexity)
        
        if password:
            result_label.config(text=f"Generated Password: {password}")
    except ValueError:
        messagebox.showerror("Error", "Please enter a valid number for length.")

def main():
    root = tk.Tk()
    root.title("Password Generator")
    
    tk.Label(root, text="Enter the desired password length:").pack(pady=5)
    global length_entry
    length_entry = tk.Entry(root)
    length_entry.pack(pady=5)
    
    tk.Label(root, text="Select the complexity level:").pack(pady=5)
    
    global complexity_var
    complexity_var = tk.IntVar(value=1)
    complexity_options = [
        ("1: Lowercase Letters", 1),
        ("2: Lowercase and Uppercase Letters", 2),
        ("3: Lowercase, Uppercase Letters, and Numbers", 3),
        ("4: Lowercase, Uppercase Letters, Numbers, and Special Characters", 4)
    ]
    
    for text, value in complexity_options:
        tk.Radiobutton(root, text=text, variable=complexity_var, value=value).pack(anchor=tk.W)
    
    tk.Button(root, text="Generate Password", command=on_generate).pack(pady=10)
    
    global result_label
    result_label = tk.Label(root, text="")
    result_label.pack(pady=10)
    
    root.mainloop()

if __name__ == "__main__":
    main()
